// Copyright (c) 2025 Sidero Labs, Inc.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/siderolabs/omni/internal/backend/runtime/omni/controllers/omni (interfaces: TalosClient)
//
// Generated by this command:
//
//	mockgen -destination=etcd_backup_mock_1_test.go -package omni_test -typed -copyright_file ../../../../../../hack/.license-header.go.txt . TalosClient
//

// Package omni_test is a generated GoMock package.
package omni_test

import (
	context "context"
	io "io"
	reflect "reflect"

	machine "github.com/siderolabs/talos/pkg/machinery/api/machine"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTalosClient is a mock of TalosClient interface.
type MockTalosClient struct {
	ctrl     *gomock.Controller
	recorder *MockTalosClientMockRecorder
	isgomock struct{}
}

// MockTalosClientMockRecorder is the mock recorder for MockTalosClient.
type MockTalosClientMockRecorder struct {
	mock *MockTalosClient
}

// NewMockTalosClient creates a new mock instance.
func NewMockTalosClient(ctrl *gomock.Controller) *MockTalosClient {
	mock := &MockTalosClient{ctrl: ctrl}
	mock.recorder = &MockTalosClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTalosClient) EXPECT() *MockTalosClientMockRecorder {
	return m.recorder
}

// EtcdSnapshot mocks base method.
func (m *MockTalosClient) EtcdSnapshot(ctx context.Context, req *machine.EtcdSnapshotRequest, callOptions ...grpc.CallOption) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EtcdSnapshot", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EtcdSnapshot indicates an expected call of EtcdSnapshot.
func (mr *MockTalosClientMockRecorder) EtcdSnapshot(ctx, req any, callOptions ...any) *MockTalosClientEtcdSnapshotCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EtcdSnapshot", reflect.TypeOf((*MockTalosClient)(nil).EtcdSnapshot), varargs...)
	return &MockTalosClientEtcdSnapshotCall{Call: call}
}

// MockTalosClientEtcdSnapshotCall wrap *gomock.Call
type MockTalosClientEtcdSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTalosClientEtcdSnapshotCall) Return(arg0 io.ReadCloser, arg1 error) *MockTalosClientEtcdSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTalosClientEtcdSnapshotCall) Do(f func(context.Context, *machine.EtcdSnapshotRequest, ...grpc.CallOption) (io.ReadCloser, error)) *MockTalosClientEtcdSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTalosClientEtcdSnapshotCall) DoAndReturn(f func(context.Context, *machine.EtcdSnapshotRequest, ...grpc.CallOption) (io.ReadCloser, error)) *MockTalosClientEtcdSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
